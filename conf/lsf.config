singularity {
 	enabled = true
	autoMounts = true
	runOption = "--containall"
	/*cacheDir = '/nfs/cellgeni/imaging/singularity/cache'*/
}

docker.enabled = false

executor {
    name = 'lsf'
    // https://www.nextflow.io/docs/latest/executor.html#lsf
    perJobMemLimit = true
}

process {
    withName : 'Feature_based_registration' {
	cpus = { check_max( 12 * task.attempt, 'cpus' ) }
	memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    }

    withName : 'Feature_based_registration' {
	cpus = { check_max( 12 * task.attempt, 'cpus' ) }
	memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
